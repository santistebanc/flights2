---
description: CRITICAL - Project Management & Task Completion Protocol
globs: "**/*"
alwaysApply: true
---

# üö® CRITICAL: Project Management & Task Completion Protocol

## Meta Rule: Cursor Rules File Formatting

- Always use correct frontmatter formatting:
  - Only one frontmatter block at the very top of the file
  - Fill out all fields (description, globs, alwaysApply)
  - Never duplicate the frontmatter or place it at the end of the file

## üéØ MANDATORY Task Completion Protocol

**CRITICAL**: After completing ANY sub-task, the AI MUST follow this exact sequence:

### 1. Mark Task Complete

- Immediately change `[ ]` to `[x]` in `tasks/tasks-prd-flight-scraping-app.md`

### 2. Document Changes

- **List ALL files touched/modified** with brief descriptions of what was changed
- Include both code files and documentation files

### 3. Run Validation

- **First**: Run the full test suite (`npm test`, `pytest`, etc.)
- **If no test script**: Run TypeScript check (`npx tsc --noEmit`)
- **Only proceed if validation passes**

### 4. Stage and Commit

- **Stage changes**: `git add .`
- **Clean up**: Remove any temporary files before committing
- **Commit with proper format**:
  ```bash
  git commit -m "feat: complete task X.X - brief description" \
    -m "- Key change 1" \
    -m "- Key change 2" \
    -m "Related to Task X.X in PRD"
  ```

### 5. Wait for User Approval

- **STOP and wait for user go-ahead** before proceeding to next sub-task
- **Ask**: "Would you like me to continue with the next sub-task?"

## üìã PRD Change Management

**CRITICAL**: Before implementing any change requested by the user, the AI must:

1. **Check PRD Compliance**: Verify if the requested change is already mentioned in the PRD (`tasks/prd-flight-scraping-app.md`).

2. **If Change is NOT in PRD**:

   - **Prompt the user**: "This change is not mentioned in the PRD. Would you like me to update the PRD to include this requirement? This will ensure the change is properly documented and tracked."
   - **Wait for confirmation**: Only proceed after the user confirms they want the PRD updated.
   - **Update PRD**: If confirmed, modify the PRD to include the new requirement in the appropriate section.
   - **Update Task List**: Generate or modify existing tasks in `tasks/tasks-prd-flight-scraping-app.md` to reflect the new PRD requirements.
   - **Document Changes**: List all PRD and task list modifications in the implementation summary.

3. **If Change IS in PRD**: Proceed with implementation directly.

4. **Always Document**: Whether the change was in the PRD or not, always document what was implemented and any files modified.

## üîÑ Development Workflow

- **Always check the PRD first** before implementing any changes
- **Follow the task list structure** and update it as work progresses
- **Document all changes** made to the codebase
- **Ensure changes align** with the project's goals and requirements
- **Maintain consistency** with existing code patterns and architecture
- **One sub-task at a time** - never start the next until user approves

## üìÅ Current Project Context

- **PRD**: `tasks/prd-flight-scraping-app.md`
- **Task List**: `tasks/tasks-prd-flight-scraping-app.md`
- **Current Focus**: Section 2 - Enhance Search Interface with Flight-Specific Components
- **Next Task**: 2.4 Create search form component that combines all flight search fields

## ‚ö†Ô∏è REMINDER

This protocol MUST be followed for EVERY task completion, even after Cursor restarts. The rules are stored in `.cursor/rules/project-management.mdc` and apply to all files (`**/*`) with `alwaysApply: true`.
